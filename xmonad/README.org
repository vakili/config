Vim-inspired configuration for xmonad. Most features live under the modifier
key, here denoted ~M~.

* Manipulating windows
Layout control is identical to vanilla xmonad. The configuration adds support
for locating, inserting, deleting, yanking, putting and tagging windows.

| Keymap       | Effect                                            |
|--------------+---------------------------------------------------|
| ~M-/~        | Prompt for a window to be focused.                |
| ~M-i~        | Prompt for a window to be inserted.               |
| ~M-d~        | Delete the focused window.                        |
| ~M-y~        | Yank the focused window.                          |
| ~M-p~        | Put all yanked windows in active workspace.       |
| ~M-<char>~   | Mark the focused window with a character.         |
| ~M-'-<char>~ | Focus the window marked with the given character. |

At the moment, the only characters that can be used as marks are ~a~, ~b~, ~m~, ~n~.
Support for more characters is not difficult to implement, but an elegant
abstraction has yet to be found.

Note that /yanking/ here behaves more like ~x~  than ~y~ in vim, in that there is no duplication to speak of.
Thus yanking only has an effect after /putting/ (via ~M-p~) occurs.
Proper window duplication is actually possible via some xmonad-contrib modules.

* Launching and focusing applications
  In addition to the ~M-i~ keymap above, the window manager provides keymaps for
  quickly launching ("running") or focusing ("raising") commonly used programs.
  The basic behavior is known in xmonad parlance as "run or raise". The
  configuration defines an abstraction called /applications/, which wraps data
  associated with commonly used programs.

  We illustrate the use of this abstraction by considering terminal emulators.
  The configuration defines the following application:
   #+begin_src haskell
   urxvt       = App
     { keyApp  =              "t"      -- hotkey for urxt
     , findApp = className =? "URxvt"  -- class name (a property of X windows) for urxvt
     , runApp  =  spawnHere   "urxvt"  -- command to run urxvt
     }
   #+end_src
   
  With this definition, pressing ~M-t~ will have the following effect,
  depending on the state of the window manager.
  
  | State                        | Effect                            |
  |------------------------------+-----------------------------------|
  | No terminal window exists.   | A new terminal window is created. |
  | Some terminal window exists. | Some terminal window is focused.  |
 
  If more than one terminal window exists then holding ~M~ and repeatedly
  pressing ~t~ will cycle through existing terminal windows.

  The choice of which terminal window to focus is a possible area of
  improvement. Currently, terminal windows are cycled in their order of
  creation. A more desirable behavior would be to first cycle through terminal
  instances in the current workspace, then work backwards through workspaces.
  
  When a terminal window exists, a new one can be created with ~M-S-t~.
  
  The configuration provides a number of applications besides ~urxvt~. The
  current choice of hotkeys favors characters which are frequent in the english
  language, to increase compatibility with ergonomic keyboard layouts such as
  colemak.
  
  | Application | Hotkey | Rationale                                       |
  |-------------+--------+-------------------------------------------------|
  | Emacs       | ~e~    | ~e~ for editor/emacs                            |
  | qutebrowser | ~o~    | ~o~ is the key to open a new tab in qutebrowser |
  | zathura     | ~a~    |                                                 |
  | alacritty   | ~t~    | ~t~ for terminal                                |
* Areas for improvement and future work
** Dark/light theme toggle
   There should be a unified interface for switching between light and dark themes.
   This could be a window-wise keybinding, or a global switch.
   
   Below are some notes about how to implement this.
**** Emacs
     What we refer to as /windows/ are called /frames/ in Emacs terminology.
     Color themes are already frame-global, meaning that changing the theme in one frame will propagate to all frames.
     
     Changing the theme can be done by running some elisp, which is possible from the shell using ~--eval~ and ~-c~, see https://old.reddit.com/r/emacs/comments/hfxk0n/send_command_to_emacs_serverclient/
     
     The commands to run are as follows:
     #+begin_src elisp
     emacsclient --eval "(load-theme 'spacemacs-light)"
     emacsclient --eval "(load-theme 'spacemacs-dark)"
     #+end_src
**** Qutebrowser
     Dark mode can be enabled in ~config.py~ with the following line:
     #+begin_src python
     c.colors.webpage.darkmode.enabled = True;
     #+end_src
  
     This will only come into effect upon restarting qutebrowser, which can be done by running ~:restart~ in the qutebrowser command prompt.
     
     Unfortunately, restarting causes all qutebrowser windows to swapn on the workspace of the window in which the restart command is issued.
     In other words, it doesn't play nice with having qutebrowser windows across several workspaces.
**** Firefox
     The background can be set in ~about:config~.
     The two following lines can be used in ~home.nix~.
     #+begin_src nix
     "browser.display.background_color" = "#1D1B19";
     "browser.display.background_color" = "#FFFFFF";
     #+end_src
     
     So far, I haven't managed to set the Firefox UI theme via home-manager.
**** Alacritty
     The Alacritty wiki has some info on this.
     
     See
     1. https://github.com/alacritty/alacritty/wiki/Color-schemes#multiple-schemes
     2. https://unix.stackexchange.com/questions/600414/how-toggle-alacritty-terminal-colorscheme-with-a-keystroke
**** Ad-hoc
     There is a way to invert colors window-wise, using a compositor. See:
     
     1. https://unix.stackexchange.com/questions/20565/invert-colors-of-the-active-window
     2. https://askubuntu.com/questions/134668/how-to-trigger-a-color-inversion-effect-for-one-window
  
     Specifically, use
     #+begin_src shell
     picom --invert-color-include 'class_g="Alacritty"'
     #+end_src

     Note: the above stackexchange link refers to the compositor /compton/, which is deprecated in favor of /picom/.
**** Other
     Rofi, Telegram, Signal, dzen2.
** Passing working directories
   Terminal and editor windows typically have a path associated to them.
   It is often desirable to e.g. spawn a terminal in the directory of an Emacs buffer.
   Or perhaps one wishes to spawn a second terminal/editor in the same directory.
   
   Thus it would be convenient to be able to pass this /working directory/ metadata between windows.
   
   A related idea is explored in a xmonad-contrib package which defines per-workspace directories, see http://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Layout-WorkspaceDir.html
** A less obtrusive scratchpad
   The scratchpad currently floats in the middle of the screen, which ocasionally obscures content which I want to display at the same time as the scratchpad.
   This could be mitigated by either having a keybind to move the scratchpad out of the way, or enabling some degree of scratchpad transparency.
** Miscellaneous
   Macros, visual mode, tabs, columnar layout, a more rigid data structure, swapping adjacent workspaces, 
* Resources
  https://github.com/bbugyi200/dotfiles
  https://eyenx.ch/2020/05/02/using-named-scratchpads-with-xmonad/
  https://github.com/disconsis/literate-xmonad-config/blob/master/src/config.org#which-key
